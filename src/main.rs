// Adapted from https://github.com/esp-rs/std-training/intro/http-server

use std::{io::Read, net::TcpListener};

use anyhow::Result;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        ledc::{config::TimerConfig, LedcDriver, LedcTimerDriver},
        prelude::*,
    },
    log::EspLogger,
    sys,
};

use wifi::wifi;

mod wifi;

const ADDR: &str = "0.0.0.0:4444";

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    sys::link_patches();
    EspLogger::initialize_default();
    unsafe {
        sys::nvs_flash_init();
    }

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;
    let _wifi = wifi(
        // The constant `CONFIG` is auto-generated by `toml_config`.
        CONFIG.wifi_ssid,
        CONFIG.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let pwm_pin = peripherals.pins.gpio10;
    let mut pwm = LedcDriver::new(
        peripherals.ledc.channel0,
        LedcTimerDriver::new(
            peripherals.ledc.timer0,
            &TimerConfig::new().frequency(25.kHz().into()),
        )
        .unwrap(),
        pwm_pin,
    )
    .unwrap();
    let max_duty = pwm.get_max_duty();

    let listener = TcpListener::bind(ADDR).unwrap();
    println!("Listening on {ADDR}");

    for stream in listener.incoming() {
        let mut received = [0; 2];
        stream.unwrap().read(&mut received).unwrap();

        if received[1] == 0xDD {
            let percentage = u8::from_le_bytes([received[0]]);
            let duty = ((max_duty as f32) * (percentage as f32 / 100.)) as u32;

            println!(
                "Setting pwm duty cycle to {percentage}% ({duty}/{max_duty})"
            );
            pwm.set_duty(duty).unwrap();
        }
    }

    unreachable!()
}
